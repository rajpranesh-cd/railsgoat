name: Semgrep

on:
  push:
    branches:
      - "*"

jobs:
  semgrep:
    name: Semgrep Scan and Report Generation
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    env:
      SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Run Semgrep scan
      - name: Run Semgrep scan
        id: scan
        continue-on-error: true
        run: |
          semgrep ci
          semgrep ci --config=auto --sarif --sarif-output=result.sarif
      # Step 3: Set up Python virtual environment
      - name: Set up Python environment
        run: |
          python3 -m venv /opt/venv
          source /opt/venv/bin/activate
          pip install beautifulsoup4

      # Step 4: Generate HTML and CSV Reports with Python Script
      - name: Generate Reports
        run: |
          source /opt/venv/bin/activate
          python3 - <<'EOF'
          import json
          import csv
          from bs4 import BeautifulSoup

          def generate_sarif_html_and_csv(sarif_file_path, html_file_path, csv_file_path):
              with open(sarif_file_path, 'r') as sarif_file:
                  sarif_data = json.load(sarif_file)
              
              runs = sarif_data.get("runs", [])
              results_by_rule = {}

              for run in runs:
                  results = run.get("results", [])
                  for result in results:
                      rule_id = result.get("ruleId", "Uncategorized")
                      message = result.get("message", {}).get("text", "N/A")
                      locations = result.get("locations", [])

                      for location in locations:
                          uri = location.get("physicalLocation", {}).get("artifactLocation", {}).get("uri", "N/A")
                          start_line = location.get("physicalLocation", {}).get("region", {}).get("startLine", "N/A")
                          snippet = location.get("physicalLocation", {}).get("region", {}).get("snippet", {}).get("text", "N/A")
                          
                          if rule_id not in results_by_rule:
                              results_by_rule[rule_id] = []
                          results_by_rule[rule_id].append({
                              "message": message,
                              "file": uri,
                              "line": start_line,
                              "snippet": snippet
                          })
              
              with open(csv_file_path, 'w', newline='', encoding='utf-8') as csv_file:
                  csv_writer = csv.writer(csv_file)
                  csv_writer.writerow(["Rule ID", "Message", "File", "Line", "Snippet"])
                  for rule_id, details in results_by_rule.items():
                      for detail in details:
                          csv_writer.writerow([rule_id, detail["message"], detail["file"], detail["line"], detail["snippet"]])

              html = BeautifulSoup("<html><head><title>SARIF Report</title></head><body></body></html>", 'html.parser')
              style = """
              <style>
                  body { font-family: 'Segoe UI', sans-serif; background: #f9f9f9; color: #333; }
                  .container { margin: 20px; padding: 20px; background: #fff; border-radius: 5px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); }
                  h1 { font-size: 20px; color: #444; }
                  .rule-group { margin-bottom: 20px; }
                  .rule-header { background: #f1f1f1; padding: 10px; font-size: 16px; font-weight: bold; cursor: pointer; border: 1px solid #ddd; }
                  .rule-details { padding: 10px; display: none; border: 1px solid #ddd; border-top: none; }
                  .issue-row { margin-bottom: 15px; }
                  .issue-header { color: #d9534f; font-weight: bold; }
                  .file-info { color: #0056b3; margin-top: 5px; }
                  .snippet { background: #f8f9fa; border: 1px solid #ddd; padding: 8px; font-family: monospace; font-size: 13px; border-radius: 3px; }
              </style>
              <script>
                  function toggleDetails(id) {
                      var element = document.getElementById(id);
                      element.style.display = element.style.display === 'none' ? 'block' : 'none';
                  }
              </script>
              """
              html.head.append(BeautifulSoup(style, 'html.parser'))
              container = html.new_tag('div', attrs={'class': 'container'})
              html.body.append(container)
              container.append(html.new_tag('h1'))
              container.h1.string = "SARIF Report"

              for rule_id, details in results_by_rule.items():
                  group_div = html.new_tag('div', attrs={'class': 'rule-group'})
                  header_div = html.new_tag('div', attrs={'class': 'rule-header', 'onclick': f'toggleDetails("{rule_id}")'})
                  header_div.string = f"{rule_id} ({len(details)} issues)"
                  group_div.append(header_div)

                  details_div = html.new_tag('div', attrs={'class': 'rule-details', 'id': rule_id})
                  for detail in details:
                      issue_div = html.new_tag('div', attrs={'class': 'issue-row'})
                      issue_div.append(html.new_tag('div', attrs={'class': 'issue-header'}))
                      issue_div.div.string = detail["message"]

                      issue_details = html.new_tag('div', attrs={'class': 'file-info'})
                      issue_details.string = f"File: {detail['file']} (Line: {detail['line']})"
                      issue_div.append(issue_details)

                      if detail["snippet"] != "N/A":
                          snippet = html.new_tag('pre', attrs={'class': 'snippet'})
                          snippet.string = detail["snippet"]
                          issue_div.append(snippet)

                      details_div.append(issue_div)
                  group_div.append(details_div)
                  container.append(group_div)

              with open(html_file_path, 'w', encoding='utf-8') as html_file:
                  html_file.write(str(html))

          generate_sarif_html_and_csv("result.sarif", "report.html", "report.csv")
          EOF

      # Step 5: Upload Artifacts
      - name: Upload Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: semgrep-results
          path: |
            result.sarif
            report.html
            report.csv

      # Step 6: Fail if Issues Found
      - name: Fail if vulnerabilities found
        if: steps.scan.outcome == 'failure'
        run: exit 1
